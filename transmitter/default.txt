<!--For Extension info, read How to make extensions.txt in Extension folder-->
<!--Transmitter V5.01-->
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="title" content="LioranBoard Transmitter">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="description" content="LioranBoard component which allows Receiver to connect to Twitch and its extensions.">
<meta name="keywords" content="LioranBoard, Transmitter, Twitch, Stream">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="language" content="English">
<title>LioranBoard Transmitter</title>
<link rel="shortcut icon" type="image/x-icon" href="https://christinna9031.github.io/LioranBoard-Transmitter/favicon.ico"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/christinna9031/LioranBoard-Files@main/lib/bootstrap.min.css">
<link href='https://fonts.googleapis.com/css?family=Lato:400,700' rel='stylesheet' type='text/css'>
<style>
body {
  font-family: 'Lato', sans-serif;
}
h1 {
font-size: calc(1.2em + 1vw);
}
a {
  color: #ffac7c;
  text-decoration: underline;
}
a:hover {
  color: #ff6810;
  text-decoration: underline;
}
.tslCollapse, .tslCollapse:hover, .tslCollapse a {
  text-decoration: none;
  color: #FFFFFF;
}
.tslCollapse.collapsed:before {
  content:'Show Options \01F847' ;
  width:15px;
}
.tslCollapse:before {
  content:'Hide Options \01F845' ;
  width:15px;
}
#footer .tslCollapse.collapsed:before {
  content:'Show Installed Extensions \01F847' ;
  width:15px;
}
#footer .tslCollapse:before {
  content:'Hide Installed Extensions \01F845' ;
  width:15px;
}

#LBreceiverlog, #LBchatlog, #LBpubsublog {
  background:rgb(10, 11, 26);
  padding:5px 15px;
  display:block;
  position: relative;
  float: left;
  text-align: left;
  max-height: 50%;
  overflow-y: auto;
}

#debugLogContent, #debugLog {
  border:none;
  background-color:rgba(0,0,0,0);
  box-shadow:none;
}
#debugLog .nav-link {
  padding: .2rem 1rem;
}
#LBChat, #LBPubSub, #LBreceiver {
  overflow: hidden;
  padding:5px;
  margin:2px;
  padding: 1px 
}
samp {
  width: 200px;
  word-break: break-all;
  white-space: normal;
}

input{
 padding:0px;
 margin:1px 1px
}
button{
 padding:2px 5px;
 margin:3px 0;
 box-shadow:2 2px #c5c5c5
}
button:active{
 background-color:#797979;
 color:#fff;
 box-shadow:0 0 rgb(223, 223, 223);
 transform:translateY(1px)
}
.nav {
  padding-left: 0;
  margin-bottom: 0;
}

.nav-pills .nav-link {
  font-family: Arial;
  padding: .4em .6em .1em .6em;
  margin: 2px 1px 0px 1px!important;
  background: rgb(175,177,184);
  background-color: linear-gradient(0deg, rgba(175,177,184,1) 15%, rgba(203,203,213,1) 61%);
  font-weight: bold;
  color:rgb(31, 32, 54);
  border-radius: 5px 5px 0px 0px;
  text-shadow: 0px 1px 2px rgb(195, 195, 195);
  transition: 0.01s;
}

.nav-pills > li > .nav-link.active {
   background-image: linear-gradient(to bottom, #E28B3B, #B96C23);
   color: rgb(255, 255, 255);
   border: 1px solid #8F8C8C;
   text-shadow: 1px 1px 3px rgb(0 0 0 / 100%);
 }
 
 .tab-content {
   background-color: rgba(39, 55, 110, 0.5);
   box-shadow: 0.5rem 0.5rem 0.5rem #00000080;
   min-height:50px;
   width:100%;
   border-radius:3px;
   overflow:hidden;
   padding:20px;
 }
 .draggable-source--is-dragging {
   opacity: 0;
 }

#versionOBS:after {
 content:'OBS Studio'
}
#versionOBSWS:after {
 content:'OBS Websocket'
}
#versionReceiver:after {
 content:'LB Receiver'
}
#versionStreamDeck:after {
 content:'LB StreamDeck (PC)'
}
#versionTransmitter:after {
 content:'LB Transmitter'
}
@media (max-width: 576px) {
  .nav-pills .nav-link {
      border-radius: 5px 5px 0px 0px;
      font-weight:bold;
      padding: .2em .4em .1em .4em;
      font-size: 0.92em 
 }
  button{
     font-size:0.93em;
      padding:2px 5px;
     margin:3px 0;
     box-shadow:2 2px #c5c5c5
 }
 button:active{
     background-color:#797979;
     color:#fff;
     box-shadow:0 0 rgb(223, 223, 223);
     transform:translateY(1px)
 }
  #versionOBS:after {
     content:'OBS'
 }
  #versionOBSWS:after {
     content:'OBSWS'
 }
  #versionReceiver:after {
     content:'LBR'
 }
  #versionStreamDeck:after {
     content:'LBS PC'
 }
  #versionTransmitter:after {
     content:'LBT'
 }
}


.notabs>.tab-pane {
  display: block !important;
  opacity: 1 !important;
}
.notabs button, .notabs input{
 color:#fff;
 background-color:#4c4c4c;
 border-color:#464546
}
.connected{
 color:#4ad84a
}
.disconnected{
 color:#fb4848
}

</style>
</head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js" integrity="sha512-E8QSvWZ0eCLGk4km3hxSsNmGWbLtSCSUcewDQPQWZF6pEU8GlT8a5fF32wOl1i8ftdMhssTrF/OhyGWwonTcXA==" crossorigin="anonymous" referrerpolicy="no-referrer">
</script>
  <body>
<div class="container">
<h1 class="text-center">LioranBoard Transmitter </h1>
<!-- Connection Info -->
<div class="row justify-content-center">
  <div class="col col-auto">
    <svg id="toclient_circle" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" class="bi bi-circle-fill d-md-none me-1" viewBox="0 0 16 16">
        <circle cx="8" cy="8" r="8"/>
      </svg>
    <span>Receiver</span><span class="d-none d-md-inline-flex me-1">: </span><span id="toclient" class="disconnected d-none d-md-inline-flex">Not connected.</span>
  </div>
  <div class="col col-auto">
    <svg id="topubsub_circle" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" class="bi bi-circle-fill d-md-none me-1" viewBox="0 0 16 16">
        <circle cx="8" cy="8" r="8"/>
      </svg>
    <span>Pubsub</span><span class="d-none d-md-inline-flex me-1">: </span><span class="disconnected d-none d-md-inline-flex" id="topubsub">Not connected.</span>
  </div>
</div> <br>
<!--Tabs -->
<div class="row justify-content-center g-0">
    <ul class="nav nav-pills mb-0" id="extensions-tab" role="tablist">
</div>  
 <!-- Tab Content -->
 <div class="tab-content" id="extensions-tabContent">
<div class="tab-pane" id="content-basic" role="tabpanel" title="Transmitter" data-type="default">
		Lioranboard Connection<br>
       Connect To:	
       <input type="text" id="nIPbox" name="nIPbox" size="20" value='127.0.0.1'><br>
       Port:
       <input type="number" min="0" max="65535" id="nPortBox" name="nPortBox" value=9425> <br>
       Password:	
       <input type="password" id="nPassBox" name="nPassBox" size="20" value=''>(optional)<br>
	   <button type="button" id="cnctbutton" onclick="connectbutton()">Connect</button><br>
	   <br>
	   Test Triggers<br>
	   
    <button type="button" onclick="fakesub2()">Test Sub</button>
    <a class="tslCollapse collapsed" data-bs-toggle="collapse" href="#hidesubs" role="button" aria-expanded="false" aria-controls="hidesubs"></a>  

	  
    <div class="collapse" id="hidesubs"> 
       <input type="radio" id="itier1" name="tier" value="vtier1" checked>
       Tier 1
       <input type="radio" id="itier2" name="tier" value="vtier2">
       Tier 2
       <input type="radio" id="itier3" name="tier" value="vtier3" >
       Tier 3
       <input type="radio" id="iprime" name="tier" value="vprime" onclick="CheckUncheckSubGift(this)" >
       Prime <br>
       <input type="checkbox" id="isubgift" name="subgift" value="vsubgift" onclick="CheckUncheckSubGift(this)">
       SubGift
       <input type="checkbox" id="ianongift" name="subgift" value="vanongift" onclick="CheckUncheckSubGift(this)">
       AnonGift 
       <input type="number" min="0" max="100" id="nsubmonths" name="nsubmonths" value=1> Months <br>
       Message:	
       <input type="text" id="nsubmessage" name="nsubmessage" size="20" value='Hello World!'>
    </div>
    <div>
       <button type="button" onclick="fakegiftamount()">Test Subs Gift Amount</button>
       Amount:
       <input type="number" min="0" max="999" id="igiftamount" name="ngiftamount" value=1> 
    </div>
    <button type="button" onclick="fakebits()">Test Bits</button>
    <a class="tslCollapse collapsed" data-bs-toggle="collapse" href="#hidebits" role="button" aria-expanded="false" aria-controls="hidebits"></a>
    <div class='collapse' id="hidebits"> 
       Amount of bits:
       <input type="number" min="0" max="999" id="ibitsamount" name="nbitsamount"  value=1>
       Total bits: 	
       <input type="number" min="0" max="999" id="ibitstotal" name="ibitstotal" value=1000><br/>
       Message:	
       <input type="text" id="ibitsmessage" name="ibitsmessage" size="20" style="margin:5px 0px;" value='Hello World!'>
    </div>
    <div><button type="button" onclick="fakepoints()">Test Channel Points</button> 
       <a class="tslCollapse collapsed" data-bs-toggle="collapse" href="#hidepoints" role="button" aria-expanded="false" aria-controls="hidebits"></a>
    </div>
    <div class="collapse" id="hidepoints" >
      Redeem Name:
      <input type="text" id="ichannelpoints" name="nchannelpoints" size="10" style="margin:5px 0px">	<input type="checkbox" id="nchannelpointinput" name="nchannelpointinput" > User Input Required <br>
      Redeem Message:	
      <input type="text" id="nchannelpointsmsg" name="nchannelpointsmsg" size="20"  >	<br>
      Redeem Cost:	
      <input type="text" id="nchannelpointscost" name="nchannelpointscost" size="5"  >	
   </div>
    <div><button type="button" onclick="fakeraid()">Test Raid</button>
       Amount:
       <input type="number" min="0" max="999" id="iraidamount" name="nraidamount"  value=1> 
    </div>
    <div><button type="button" onclick="fakechatmsg()">Test Chat Message </button> 	
       <a class="tslCollapse collapsed" data-bs-toggle="collapse" href="#hidechatmsg" role="button" aria-expanded="false" aria-controls="hidechatmsg"></a>
    </div>
    <div class="collapse" id="hidechatmsg">
       Username: <input type="text" id="ichatname" size="10" value="Lioran"> <br> Message: <input type="text" id="ichatmsg" size="20" style="margin:5px 0px"; value="Hello World">	<br>
       <input type="checkbox" id="ichatbroadcaster"> Broadcaster <input type="checkbox" id="ichatmod"> Mod <input type="checkbox" id="ichatsub"> Subscriber <input type="checkbox" id="ichatvip"> VIP <input type="checkbox" id="ichatfounder"> Founder <br>
       Subscriber Tier: 
       <select id="chatmsgsubtier">
          <option value="1">1</option>
          <option value="2">2</option>
          <option value="3">3</option>
       </select>
       Month:  <input type="number" min=0 max=12 maxlength="2" oninput="javascript: if (parseInt(this.value) > parseInt(this.max)) this.value = this.max;" id="chatmsgsubmonth" value=1>
	</div>
	<br>
	Tab options
	<div class="col col-md-auto"><button type="button" onclick="TSLNoTabs()">No Tabs</button><button type="button" onclick="TSLTabs()">Show Tabs</button></div>
  </div>

<!--Your external script will be inserted here-->
<!--<script src="example.js"></script>-->
<!--INSERT PART 1-->


</div>
<div class="row justify-content-center mt-3 px-2 mb-5" id="footer"> <a class="tslCollapse collapsed" data-bs-toggle="collapse" href="#installedextensions" role="button" aria-expanded="false" aria-controls="installedextensions"></a>
  <span class='collapse' id="installedextensions"></span>
  <span id ='extensions-tab-buttons' class="mt-2">
  <button id="extensionsshow">Show All Tabs</button> <button id="extensionshide">Hide All Tabs</button> <button id="extensionsresetorder">Reset Tab Order</button> <button onclick="location.reload()">Refresh</button></span>
</div>


</div>
</body>

</script>
<script>
// url for lioranboard no longer managed this way
//let url = 'ws://127.0.0.1:9425';
// if you make an extension and it connects to twitch, use this id
const TWITCH_CLIENT_ID = "tpqy40pm79e00s63cqusqepvhwqz1n"; // value that says if pubsub is connected or not

let server_on = 0;
let receiver_on = 0;
let i_force = "";
let force_close = false; //boxes constant value

const box_newline = 0;
const box_checkbox = 2;
const box_keyboard = 7;
const box_compare = 8;
const box_math = 9;
const box_sound = 10;
const box_slider = 11;
const box_normal = 14;
const box_variable = 15;
const box_color = 17;
const box_selectvalue = 18;
const box_selectstring = 19;
const box_selectstringwritable = 20;
const box_loadfile = 22;
const box_imagefile = 23;

load_connection();

function load_connection() {
  var ls_ip = localStorage.getItem("nIPbox");
  var ls_port = localStorage.getItem("nPortBox");
  var ls_pass = localStorage.getItem("nPassBox");

  if (ls_ip == null) {
    ls_ip = "127.0.0.1";
  }

  if (ls_port == null) {
    ls_port = 9425;
  }

  if (ls_pass == null) {
    ls_pass = "";
  }

  nIPbox.value = ls_ip;
  nPortBox.value = ls_port;
  nPassBox.value = ls_pass;
}

function LBAuthenticate(salt, challenge, msg) {
  const authHash = CryptoJS.enc.Base64.stringify(CryptoJS.SHA256(msg + salt));
  const result = CryptoJS.enc.Base64.stringify(
    CryptoJS.SHA256(authHash + challenge)
  );
  return result;
} // modify UI on load

window.addEventListener("load", LBLoadTabsUI, false);

function LBLoadTabsUI() {
  const tabList = {};
  let tabSortList = JSON.parse(localStorage.getItem("tabsSortList")) || [];
  const newtabSortList = [];
  const tabsVisibility =
    JSON.parse(localStorage.getItem("tabsVisibility")) || [];
  let lastActiveTab = localStorage.getItem("tabsActive") || "content-basic";
  lastActiveTab = document.getElementById(lastActiveTab)
    ? lastActiveTab
    : "content-basic";
  const installedExt = document.querySelector("#installedextensions");
  const ul = document.getElementById("extensions-tab");
  const parent = document.getElementById("extensions-tabContent");
  const contentLi = parent.querySelectorAll(".tab-pane");
  const contentAll = [].slice
    .call(contentLi)
    .filter(
      (n) => n.parentNode.closest(".tab-pane") === parent.closest(".tab-pane")
    );
  const defaultContent = contentAll.filter((e) => e.dataset.type === "default");
  const addedContent = contentAll.filter((e) => e.dataset.type !== "default");
  const content = defaultContent.concat(addedContent.reverse());
  const activeTab = document.getElementById(lastActiveTab);
  activeTab.className = "tab-pane active"; // create tabs and checkboxes

  content.forEach((e) => {
    createExtensionTab(e);
    createExtensionBox(e);
  });
  SortTabs();
  tabSortList = newtabSortList;
  localStorage.setItem("tabsSortList", JSON.stringify(newtabSortList)); // add drag and sort functionality to tabs

  const draggable = new Draggable.Sortable(ul, {
    draggable: "li",
    distance: 1,
    sortAnimation: {
      duration: 200,
      easingFunction: "ease-in-out"
    },
    plugins: [Draggable.Plugins.SortAnimation]
  }); // save a new sort order

  draggable.on("sortable:sorted", (e) => {
    const sortArr = JSON.parse(localStorage.getItem("tabsSortList"));
    sortArr.splice(e.newIndex, 0, sortArr.splice(e.oldIndex, 1)[0]);
    localStorage.setItem("tabsSortList", JSON.stringify(sortArr));
  }); // change and save tab visibility

  document.querySelector("#installedextensions").onclick = (ev) => {
    if (ev.target.value) {
      const id = ev.target.id.slice(8);
      const li = document.querySelector(`[aria-controls="${id}"]`);

      if (ev.target.checked) {
        li.classList.remove("d-none");
      } else {
        li.classList.add("d-none");
      }

      SaveExttabsVisibility();
    }
  }; // show all tabs

  document.querySelector("#extensionsshow").onclick = () => {
    localStorage.removeItem("tabsVisibility");
    location.reload();
  }; // hide all tabs

  document.querySelector("#extensionshide").onclick = () => {
    const tabsVisiblity = {};
    document
      .querySelectorAll("#installedextensions input[type=checkbox]")
      .forEach((e) => {
        const id = e.id.slice(8);
        tabsVisiblity[id] = false;
      });
    localStorage.setItem("tabsVisibility", JSON.stringify(tabsVisiblity));
    window.location.reload();
  }; // reset tab order

  document.querySelector("#extensionsresetorder").onclick = () => {
    localStorage.removeItem("tabsSortList");
    window.location.reload();
  }; // save active tab

  ul.querySelectorAll("button").forEach(
    (btn) =>
      (btn.onclick = (btn) => {
        localStorage.setItem("tabsActive", btn.target.id.slice(0, -4));
      })
  ); // create all tabs

  function createExtensionTab(e) {
    const { title } = e;
    const { id } = e;
    const li = document.createElement("li");
    const button = document.createElement("button");
    const hide =
      typeof tabsVisibility[id] !== "undefined" && tabsVisibility[id] === false
        ? "d-none"
        : "";
    const active = lastActiveTab === id ? "active" : "";
    li.setAttributes({
      class: "nav-item",
      role: "presentation",
      draggable: "true"
    });
    button.setAttributes({
      class: `nav-link draggable-source ${active} ${hide}`,
      id: `${id}-tab`,
      "data-bs-toggle": "pill",
      "data-bs-target": `#${id}`,
      type: "button",
      role: "tab",
      "aria-controls": id,
      "aria-selected": "false",
      draggable: "true"
    });
    button.innerHTML = title;
    li.appendChild(button);
    tabList[id] = li;
  } // create all tab check boxes

  function createExtensionBox(e) {
    const checkbox = document.createElement("input");
    const text = document.createElement("span");
    text.innerHTML = `${e.title}  `;
    checkbox.type = "checkbox";
    checkbox.id = `checkbox${e.id}`;
    checkbox.checked = !(
      typeof tabsVisibility[e.id] !== "undefined" &&
      tabsVisibility[e.id] === false
    );
    text.prepend(checkbox);
    installedExt.appendChild(text);
  } // sort tabs

  function SortTabs() {
    let i = 0;

    do {
      const childId = tabSortList[i] || Object.keys(tabList)[0];

      try {
        ul.appendChild(tabList[childId]);
        newtabSortList.push(childId);
      } catch (e) {
        console.log(e);
      }

      delete tabList[childId];
      i += 1;
    } while (Object.keys(tabList).length > 0);
  } // save tabs visiblity

  function SaveExttabsVisibility() {
    const tabsVisiblity =
      JSON.parse(localStorage.getItem("tabsVisibility")) || {};
    document
      .querySelectorAll("#installedextensions input[type=checkbox]")
      .forEach((e) => {
        const id = e.id.slice(8);
        tabsVisiblity[id] = e.checked;
      });
    localStorage.setItem("tabsVisibility", JSON.stringify(tabsVisiblity));
  }
} // switch to no tabs UI

function TSLNoTabs() {
  document.getElementById("extensions-tab").className = "d-none d-flex";
  document.getElementById("extensions-tabContent").className = "notabs";
  document.getElementById("extensions-tab-buttons").className = "d-none mt-2";
} // switch to tabs UI

function TSLTabs() {
  document.getElementById("extensions-tab").className = "nav nav-pills mb-3";
  document.getElementById("extensions-tabContent").className = "tab-content";
  document.getElementById("extensions-tab-buttons").className = "mt-2";
} // change connection status UI

function ConnectionStatus(id, status, text, fill) {
  document.getElementById(id).className = `${status} d-none d-md-inline-flex`;
  document.getElementById(id).innerHTML = ` ${text}`;
  document.getElementById(`${id}_circle`).setAttribute("fill", fill);
} // helper function to set multiple element attributes at once

Element.prototype.setAttributes = function (obj) {
  for (const prop in obj) {
    this.setAttribute(prop, obj[prop]);
  }
}; // fake subscriber testing

function fakesub() {
  let i_str;
  let i_name = fakename();

  if (i_force != "") {
    i_name = i_force;
  }

  const i_name2 = fakename(i_name);
  const i_value = itier2.checked
    ? 2000
    : itier3.checked
    ? 3000
    : iprime.checked
    ? "Prime"
    : 1000;
  const i_context = isubgift.checked
    ? "subgift"
    : ianongift.checked
    ? "anonsubgift"
    : "resub";
  const messages = [
    "Hello world!",
    "Love your stream, you are a very genuine guy and you're not affraid to say it how it is. But, I would just prefer if you didn't give your opinion, just saying.",
    "Supporting how I can, keep up the great work.",
    "All that glitters is not gold. Fair is foul, and foul is fair Hover through the fog and filthy air. These violent delights have violent ends. Hell is empty and all the devils are here. By the pricking of my thumbs, Something wicked this way comes. Open, locks, Whoever knocks!"
  ];
  const i_message =
    nsubmessage.value || messages[Math.floor(Math.random() * messages.length)];
  const months = nsubmonths.value || Math.ceil(Math.random() * 10);
  const context = months > 1 ? "resub" : "sub";

  if (i_context === "resub") {
    i_str = `{"rq":"PubSubMessage","id":"","Data":{"type": "MESSAGE","data": {"topic": "channel-subscribe-events-v1.44322889","message": "{\\"user_name\\": \\"${i_name.toLowerCase()}\\",\\"display_name\\": \\"${i_name}\\",\\"channel_name\\": \\"twitch\\",\\"user_id\\": \\"44322889\\",\\"channel_id\\": \\"12826\\",\\"time\\": \\"2015-12-19T16:39:57-08:00\\",\\"sub_plan\\": \\"${i_value}\\",\\"sub_plan_name\\": \\"Channel Subscription (mr_woodchuck)\\",\\"cumulative_months\\": ${months},\\"streak_months\\": 1,\\"context\\": \\"${context}\\",\\"sub_message\\": {\\"message\\": \\"${i_message}\\",\\"emotes\\": [{\\"start\\": 23,\\"end\\": 7,\\"id\\": 2867}]}}"}}}`;
  }

  if (i_context === "subgift") {
    i_str = `{"rq":"PubSubMessage","id":"","Data":{"type": "MESSAGE","data": {"topic": "channel-subscribe-events-v1.44322889","message": "{\\"user_name\\": \\"${i_name.toLowerCase()}\\",\\"display_name\\": \\"${i_name}\\",\\"channel_name\\": \\"twitch\\",\\"user_id\\": \\"44322889\\",\\"channel_id\\": \\"12826\\",\\"time\\": \\"2015-12-19T16:39:57-08:00\\",\\"sub_plan\\": \\"${i_value}\\",\\"sub_plan_name\\": \\"Channel Subscription (mr_woodchuck)\\",\\"months\\": ${months},\\"context\\": \\"subgift\\",\\"sub_message\\": {\\"message\\": \\"${i_message}\\",\\"emotes\\": null },\\"recipient_id\\": \\"13405587\\",\\"recipient_user_name\\": \\"${i_name2.toLowerCase()}\\",\\"recipient_display_name\\": \\"${i_name2}\\"}}"}}}`;
  }

  if (i_context === "anonsubgift") {
    i_str = `{"rq":"PubSubMessage","id":"","Data":{"type": "MESSAGE","data": {"topic": "channel-subscribe-events-v1.44322889","message": "{\\"channel_name\\": \\"twitch\\",\\"channel_id\\": \\"12826\\",\\"time\\": \\"2015-12-19T16:39:57-08:00\\",\\"sub_plan\\": \\"${i_value}\\",\\"sub_plan_name\\": \\"Channel Subscription (mr_woodchuck)\\",\\"months\\": ${months},\\"context\\": \\"anonsubgift\\",\\"sub_message\\": {\\"message\\": \\"${i_message}\\",\\"emotes\\": null },\\"recipient_id\\": \\"13405587\\",\\"recipient_user_name\\": \\"${i_name2.toLowerCase()}\\",\\"recipient_display_name\\": \\"${i_name2}\\"}"}}}`;
  }

  console.log("Fake Test Sub sent.");
  lioranboardclient.send(i_str);
}

function fakesub2() {
  if (i_force == "") {
    fakesub();
  }
} // fake gift sub testing

function fakegiftamount() {
  if (i_force !== "") {
    return 0;
  }

  i_force = fakename();

  if (igiftamount.value < 1) {
    igiftamount.value = 1;
  }

  if (igiftamount.value > 100) {
    igiftamount.value = 100;
  }

  if (iprime.checked == true) {
    iprime.checked = false;
    itier1.checked = true;
  }

  if (ianongift.checked == false) {
    isubgift.checked = true;
  } else {
    i_force = "Anonymous User";
  }

  let i_value = "Tier 1";

  if (itier2.checked == true) {
    i_value = "Tier 2";
  }

  if (itier3.checked == true) {
    i_value = "Tier 3";
  }

  console.log(`Fake sub gift amount of ${igiftamount.value} sent.`);
  const raid_obj = {
    rq: "SendTrigger",
    id: "",
    Type: 2,
    Data: {
      amount: igiftamount.value,
      tier: 1,
      trigger_data: {
        user_name: i_force.toLowerCase(),
        display_name: i_force,
        user_id: 123456789,
        amount: igiftamount.value,
        tier: "Tier 1"
      }
    }
  };
  lioranboardclient.send(JSON.stringify(raid_obj));

  for (let ii = 0; ii < igiftamount.value; ii++) {
    setTimeout(fakesub, 1000 + ii * 10);
  }

  setTimeout(forcenameoff, 2100);
} // check/uncheck boxes if sub is anon, prime etc.

function CheckUncheckSubGift(e) {
  itier1.checked =
    (e.id === "isubgift" || e.id === "ianongift") && iprime.checked
      ? true
      : itier1.checked;
  iprime.checked = !(e.id === "isubgift" || e.id === "ianongift");
  ianongift.checked =
    e.id === "iprime" || e.id === "isubgift" ? false : ianongift.checked;
  isubgift.checked =
    e.id === "iprime" || e.id === "ianongift" ? false : isubgift.checked;
}

function forcenameoff() {
  i_force = "";
} // fake bits testing

function fakebits() {
  const i_name = fakename();
  ibitsamount.value = ibitsamount.value < 1 ? 1 : ibitsamount.value;
  const message =
    ibitsmessage.value.replace(/"/g, "'") ||
    "Enjoy the non-existant bits, Even if, only for a short time you got the dopamine of seeing a bits notification. Have a good day.";
  const total = ibitstotal.value || Math.ceil(Math.random() * 5000);
  i_value = parseFloat(ibitsamount.value);
  if (isNaN(i_value) == true) i_value = 1;
  if (i_value <= 0) i_value = 1;
  i_str = `{"rq":"PubSubMessage","id":"","Data":{"type": "MESSAGE","data": {"topic": "channel-bits-events-v2.46024993","message": "{\\"data\\":{\\"user_name\\":\\"${i_name.toLowerCase()}\\",\\"channel_name\\":\\"twitch\\",\\"user_id\\":\\"95546976\\",\\"channel_id\\":\\"46024993\\",\\"time\\":\\"2017-02-09T13:23:58.168Z\\",\\"chat_message\\":\\"${message}\\",\\"bits_used\\":${i_value},\\"total_bits_used\\":${total},\\"context\\":\\"cheer\\",\\"badge_entitlement\\":{\\"new_version\\":25000,\\"previous_version\\":10000}},\\"version\\":\\"1.0\\",\\"message_type\\":\\"bits_event\\",\\"message_id\\":\\"8145728a4-35f0-4cf7-9dc0-f2ef24de1eb6\\",\\"is_anonymous\\":true}"}}}`;
  console.log(`Fake Test bits for ${i_value}`);
  lioranboardclient.send(i_str);
} // fake channel points testing

function fakepoints() {
  const i_name = fakename();
  const title = ichannelpoints.value || "Test Redeem";
  const message =
    nchannelpointsmsg.value.replace(/"/g, "'") || "Testing Message";
  const cost = nchannelpointscost.value || 100;
  i_str = `{"rq":"PubSubMessage","id":"","Data":{"type":"MESSAGE","data":{"topic":"channel-points-channel-v1.23071698","message":"{\\"type\\":\\"reward-redeemed\\",\\"data\\":{\\"timestamp\\":\\"2020-05-10T02:42:01.699693419Z\\",\\"redemption\\":{\\"id\\":\\"f2418f14-1e2b-41f3-90e5-fcad7ab2c701\\",\\"user\\":{\\"id\\":\\"23071698\\",\\"login\\":\\"${i_name.toLowerCase()}\\",\\"display_name\\":\\"${i_name}\\"},\\"channel_id\\":\\"23071698\\",\\"redeemed_at\\":\\"2020-05-10T02:42:01.674616194Z\\",\\"reward\\":{\\"id\\":\\"46b39721-ce2b-4670-8b2d-b520762a3f1e\\",\\"channel_id\\":\\"23071698\\",\\"title\\":\\"${title}\\",\\"prompt\\":\\"Testing Message\\",\\"cost\\":${cost},\\"is_user_input_required\\":${
    nchannelpointinput.checked
  },\\"is_sub_only\\":false,\\"image\\":{\\"url_1x\\":\\"https://static-cdn.jtvnw.net/custom-reward-images/23071698/46b39721-ce2b-4670-8b2d-b520762a3f1e/d50acf1d-4a0c-4dd0-8596-e5ca0c386332/custom-1.png\\",\\"url_2x\\":\\"https://static-cdn.jtvnw.net/custom-reward-images/23071698/46b39721-ce2b-4670-8b2d-b520762a3f1e/d50acf1d-4a0c-4dd0-8596-e5ca0c386332/custom-2.png\\",\\"url_4x\\":\\"https://static-cdn.jtvnw.net/custom-reward-images/23071698/46b39721-ce2b-4670-8b2d-b520762a3f1e/d50acf1d-4a0c-4dd0-8596-e5ca0c386332/custom-4.png\\"},\\"default_image\\":{\\"url_1x\\":\\"https://static-cdn.jtvnw.net/custom-reward-images/default-1.png\\",\\"url_2x\\":\\"https://static-cdn.jtvnw.net/custom-reward-images/default-2.png\\",\\"url_4x\\":\\"https://static-cdn.jtvnw.net/custom-reward-images/default-4.png\\"},\\"background_color\\":\\"#00C7AC\\",\\"is_enabled\\":true,\\"is_paused\\":false,\\"is_in_stock\\":true,\\"max_per_stream\\":{\\"is_enabled\\":false,\\"max_per_stream\\":100},\\"should_redemptions_skip_request_queue\\":true,\\"template_id\\":null,\\"updated_for_indicator_at\\":\\"2020-02-12T18:00:03.401562134Z\\"},\\"user_input\\":\\"${message}\\",\\"status\\":\\"FULFILLED\\"}}}"}}}`;
  console.log(
    `Fake Test Channel Points Redeem "${ichannelpoints.value}" sent.`
  );
  lioranboardclient.send(i_str);
} // fake raid and host testing

function fakeraid() {
  if (iraidamount.value < 1) {
    iraidamount.value = 1;
  }

  console.log(`Fake Raid of ${iraidamount.value} sent.`);
  const name = fakename();
  const raid_obj = {
    rq: "SendTrigger",
    id: "",
    Type: 4,
    Data: {
      amount: iraidamount.value,
      trigger_data: {
        user_name: name.toLowerCase(),
        display_name: name,
        user_id: 123456789,
        amount: iraidamount.value
      }
    }
  };
  lioranboardclient.send(JSON.stringify(raid_obj));
} //function fakehost() { if (ihostamount.value < 1) { ihostamount.value = 1; } console.log(`Fake Host of ${ihostamount.value} sent.`); lioranboardclient.send(`{"type":"MESSAGE","topic":"FakeNotification","fake":2,"amount":"${ihostamount.value}","name":"${fakename()}"}`); }
// fake chat message testing

function fakechatmsg() {
  const name = ichatname.value || fakename();
  const msg = ichatmsg.value.replace(/"/g, "'") || "This is a test message.";
  const badge = [];
  const user_id = "123456789";

  if (ichatbroadcaster.checked) {
    badge.push("broadcaster/1");
  }

  if (ichatmod.checked) {
    badge.push("moderator/1");
  }

  if (ichatvip.checked) {
    badge.push("vip/1");
  }

  if (ichatsub.checked) {
    const tier = parseInt(chatmsgsubtier.value);
    let month =
      chatmsgsubmonth.value != 1 ? parseInt(chatmsgsubmonth.value) : 0;
    month =
      month > 3 && month < 6
        ? (month = 3)
        : month > 6 && month < 9
        ? (month = 6)
        : month > 9 && month < 12
        ? (month = 9)
        : month;
    const subBadge =
      tier === 1
        ? `subscriber/${month}`
        : tier === 2
        ? `subscriber/${2000 + month}`
        : `subscriber/${3000 + month}`;
    badge.push(subBadge);
  }

  const chat_obj = {
    rq: "SendTrigger",
    id: "",
    Type: 0,
    Data: {
      message: msg,
      broadcaster: ichatbroadcaster.checked,
      moderator: ichatmod.checked,
      sub: ichatsub.checked,
      vip: ichatvip.checked,
      founder: ichatfounder.checked,
      trigger_data: {
        emote_list: "304822798:0-9/304682444:11-19",
        user_name: name.toLowerCase(),
        display_name: name,
        user_id: 123456789,
        name_color: "#189A8D",
        badge_list: badge.join(),
        message: msg,
        channel: name,
        first_time: false
      }
    }
  };
  lioranboardclient.send(JSON.stringify(chat_obj));
} // fake names for testing

function fakename(name = "none") {
  const names = [
    "Lioran",
    "nutella4eva",
    "Kottpower",
    "Neverwho",
    "Deomew",
    "Doodybeard",
    "Exeldro",
    "AuralMoral",
    "SuperMetroid",
    "Melonax",
    "Ptoil",
    "LinksDarkHalf",
    "Derpiii_",
    "CoD360_420",
    "Bill",
    "Kurocha",
    "Lisa",
    "DeathByButtonMash",
    "Daryl",
    "Sebas",
    "Ramsreef",
    "Kelvin214"
  ];
  const randomName = names[Math.floor(Math.random() * names.length)];
  if (name !== randomName) return randomName;
  return fakename(name);
} // Receiver connection
// connect to LB

function connectbutton() {
  if (receiver_on == 1) {
    lioranboardclient.send('{"rq":"Close","id":""}');
    force_close = true;
    lioranboardclient.close();
    ConnectionStatus("toclient", "disconnected", "Connection Closed", "red");
    document.querySelector("#cnctbutton").innerText = "Disconnecting";
    console.log("Force disconnected");
  } else {
    if (lioranboardclient == -1) {
      console.log("Manual Connection.");

      if (waiting_to_connect != -1) {
        clearTimeout(waiting_to_connect);
      }

      connecttoboard();
    }
  }
}

var lioranboardclient = -1;
var waiting_to_connect = -1;
connecttoboard(); // function to establish connection to LB

function connecttoboard() {
  waiting_to_connect = -1;
  lioranboardclient = new WebSocket(
    "ws://" + nIPbox.value + ":" + nPortBox.value
  ); //lioranboardclient.binaryType = 'arraybuffer';
  // reconnect on disconnect unless force closed

  lioranboardclient.onclose = () => {
    document.querySelector("#cnctbutton").innerText = "Connect";
    receiver_on = 0; //close pubsub if on

    if (server_on != 0) {
      server_on = 0;
      pubsubserver.close();
    }

    lioranboardclient = -1; //toclient

    if (force_close == false) {
      ConnectionStatus(
        "toclient",
        "disconnected",
        "Disconnected, attempting to reconnect.",
        "red"
      );
      waiting_to_connect = setTimeout(connecttoboard, 2000); //connecttoboard();
    } else {
      ConnectionStatus("toclient", "disconnected", "Connection Closed", "red");
    }

    force_close = false;
  }; // notice that connection is established

  lioranboardclient.onopen = (event) => {
    document.querySelector("#cnctbutton").innerText = "Disconnect";
    receiver_on = 1;
    var i_obj = {
      rq: "Authentication",
      id: "",
      Name: "Transmitter"
    };
    lioranboardclient.send(JSON.stringify(i_obj));
  }; // receiving a message

  lioranboardclient.onmessage = (event) => {
    var data = event.data;
    if (typeof data == "object") {
		var u,x;
		u = URL.createObjectURL(data);
		x = new XMLHttpRequest();
		x.open('GET', u, false); // although sync, you're not fetching over internet
		x.send();
		URL.revokeObjectURL(u);
		boardmessage(x.responseText);
    } else {
      boardmessage(data);
    }
  };
} // receiving a message from lioranboard

function boardmessage(str) {
  //console.log(str);
  var TheJSON = JSON.parse(str);
  if (!("rq" in TheJSON)) {
    switch (TheJSON.upd) {
      case "Ping":
        {
          lioranboardclient.send('{"rq":"Pong","id":""}');
        }
        break;

      case "ResetPlease":
        {
          location.reload();
        }
        break;
      //extension triggered

      case "ExecuteCommand":
        {
          LBExtensionReceived(TheJSON.CommandName, TheJSON.Data);
        }
        break;
    }
  } else {
    switch (TheJSON.rq) {
      //ping back when requested
      case "Ping":
        {
          lioranboardclient.send('{"rq":"Pong","id":""}');
        }
        break;
      //authentication check

      case "Authentication":
        {
          if (TheJSON.AuthRequired == false) {
            LBconnected();
          } else {
            var i_obj = {
              rq: "Authenticate",
              id: "",
              Name: "Transmitter"
            };
            i_obj.Enigma = LBAuthenticate(
              TheJSON.Salt,
              TheJSON.Challenge,
              nPassBox.value
            );
            lioranboardclient.send(JSON.stringify(i_obj));
          }
        }
        break;

      case "Authenticate":
        {
          if (TheJSON.success == true) {
            LBconnected();
          }
        }
        break;

      case "GetTwitchList":
        {
          twitch_list = TheJSON.twitch_list;
          connectPubSubserver();
        }
        break;

      default:
        {
          LBExtensionReceived(TheJSON.id, TheJSON);
        }
        break;
    }
  }
} //when transmitter connect to LB, this happens

function LBconnected() {
  localStorage.setItem("nIPbox", nIPbox.value);
  localStorage.setItem("nPortBox", nPortBox.value);
  localStorage.setItem("nPassBox", nPassBox.value);
  ConnectionStatus("toclient", "connected", "Connected", "green");
  console.log("LB connected successfully"); // Your LioranBoard extension command will be inserted here

  /*INSERT PART 2*/


  var i_obj = {
    rq: "GetTwitchList",
    id: ""
  };
  lioranboardclient.send(JSON.stringify(i_obj));
} /// PubSub connection
// connect to Twitch pubsub

function connectPubSubserver() {
  //connect
  pubsubserver = new WebSocket("wss://pubsub-edge.twitch.tv");
  server_on = 1; //ping interval

  function PubSubPing() {
    pubsubserver.send('{"type": "PING"}');
  } // attempt to reconnect on disconnect, unless LioranBoard is disconnected

  pubsubserver.onclose = function (event) {
    if (on_server == 2) {
      clearInterval(pubsubinterval);
    }

    on_server = 0;
    ConnectionStatus(
      "topubsub",
      "disconnected",
      "Connection closed. Attempting to reconnect.",
      "red"
    );

    if (receiver_on != 0) {
      connectPubSubserver();
    }
  }; //once connected, listen for stuff

  pubsubserver.onopen = function (event) {
    console.log("Twitch PubSub connected successfully.");
    pubsubinterval = setInterval(PubSubPing, 120000);
    on_server = 2;
    ConnectionStatus("topubsub", "connected", "Connected", "green"); //go through the whole list and listen to everything the user selected

    var i_count = 0;

    while (Object.keys(twitch_list)[i_count] != undefined) {
      //repeat for the amount of keys
      var i_key;
      i_key = Object.keys(twitch_list)[i_count]; //listen for bits

      if (twitch_list[i_key].listen_bits == true) {
        pubsubserver.send(
          '{"type":"LISTEN","nonce":"' +
            "bits-" +
            i_key +
            '","data":{"topics":["channel-bits-events-v2.' +
            i_key +
            '"],"auth_token":"' +
            twitch_list[i_key].token +
            '"}}'
        );
      } //listen for follow. twitch blocked this so it doesnt work

      if (twitch_list[i_key].listen_follow == true) {
        //pubsubserver.send('{"type":"LISTEN","nonce":"'+'follows-'+i_key+'","data":{"topics":["follows.'+i_key+'"],"auth_token":"'+twitch_list[i_key].token+'"}}');
      } //listen moderation

      if (twitch_list[i_key].listen_moderation == true) {
        pubsubserver.send(
          '{"type":"LISTEN","nonce":"' +
            "mod-" +
            i_key +
            '","data":{"topics":["chat_moderator_actions.' +
            i_key +
            '"],"auth_token":"' +
            twitch_list[i_key].token +
            '"}}'
        );
      } //listen redeem

      if (twitch_list[i_key].listen_redeem == true) {
        pubsubserver.send(
          '{"type":"LISTEN","nonce":"' +
            "redeem-" +
            i_key +
            '","data":{"topics":["channel-points-channel-v1.' +
            i_key +
            '"],"auth_token":"' +
            twitch_list[i_key].token +
            '"}}'
        );
      } //listen subs

      if (twitch_list[i_key].listen_subs == true) {
        pubsubserver.send(
          '{"type":"LISTEN","nonce":"' +
            "subs-" +
            i_key +
            '","data":{"topics":["channel-subscribe-events-v1.' +
            i_key +
            '"],"auth_token":"' +
            twitch_list[i_key].token +
            '"}}'
        );
      }

      if (twitch_list[i_key].listen_whispers == true) {
        pubsubserver.send(
          '{"type":"LISTEN","nonce":"' +
            "whispers-" +
            i_key +
            '","data":{"topics":["whispers.' +
            i_key +
            '"],"auth_token":"' +
            twitch_list[i_key].token +
            '"}}'
        );
      }

      i_count++;
    }
  }; // receive data from pubsub, so send it to LioranBoard

  pubsubserver.onmessage = function (event) {
    //send pubsub message to lioranboard, let it deal with it
    lioranboardclient.send(
      '{"rq":"PubSubMessage","id":"","Data":' + event.data + "}"
    );
  };
}
/*
START EXTENSION STUFF HERE
Extension are a way to connect LioranBoard to other apps and services. 
You can build your extension in any language you want and have it connect through this Transmitter using websockets (Receiver supports only one connection).
To Send a message to LioranBoard, simply use the function lioranboardclient.send(JSONstring);
Find more info on all messages you can send to LioranBoard in lioranboard/extension/How to make extensions.txt file.
*/
// You can receive message from lioranboard using the command "Send to Extension". The data you send is a JSON string. The String will be converted to a JSON object called LioranBoardJSON.
// In the JSON you can include any data you want if you use manual extension.
// for any other extension, the datatype will be what's in the extension box.

function LBExtensionReceived(hook, LioranBoardJSON) {
  switch (hook) {
    // datatype you specified.
    default:
      {
        console.log("missing hook [" + hook + "]");
      }
      break;
    //nohook

    case "":
      {
      }
      break;
    //Your hooks will be inserted here

    /*INSERT PART 3*/


  }
} // your main script will be inserted here

/*INSERT PART 4*/


  </script>
  <script src="https://cdn.jsdelivr.net/npm/@shopify/draggable@1.0.0-beta.11/lib/draggable.bundle.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

  </html>